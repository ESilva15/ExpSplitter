// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: stores.sql

package repository

import (
	"context"
	"database/sql"
)

const deleteStore = `-- name: DeleteStore :execresult
DELETE FROM stores WHERE "StoreID" = ?
`

func (q *Queries) DeleteStore(ctx context.Context, storeid int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteStore, storeid)
}

const getStore = `-- name: GetStore :one
SELECT StoreID, StoreName FROM stores WHERE "StoreID" = ?
`

func (q *Queries) GetStore(ctx context.Context, storeid int64) (Store, error) {
	row := q.db.QueryRowContext(ctx, getStore, storeid)
	var i Store
	err := row.Scan(&i.StoreID, &i.StoreName)
	return i, err
}

const getStores = `-- name: GetStores :many
SELECT StoreID, StoreName FROM stores
`

func (q *Queries) GetStores(ctx context.Context) ([]Store, error) {
	rows, err := q.db.QueryContext(ctx, getStores)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Store
	for rows.Next() {
		var i Store
		if err := rows.Scan(&i.StoreID, &i.StoreName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertStore = `-- name: InsertStore :execresult
INSERT INTO stores("StoreName") VALUES(?)
`

func (q *Queries) InsertStore(ctx context.Context, storename string) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertStore, storename)
}

const updateStore = `-- name: UpdateStore :execresult
UPDATE stores SET "StoreName" = ? WHERE "StoreID" = ?
`

type UpdateStoreParams struct {
	StoreName string
	StoreID   int64
}

func (q *Queries) UpdateStore(ctx context.Context, arg UpdateStoreParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateStore, arg.StoreName, arg.StoreID)
}
