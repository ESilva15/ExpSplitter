// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: categories.sql

package repository

import (
	"context"
	"database/sql"
)

const deleteCategory = `-- name: DeleteCategory :execresult
DELETE FROM categories WHERE "CategoryID" = ?
`

func (q *Queries) DeleteCategory(ctx context.Context, categoryid int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteCategory, categoryid)
}

const getCategories = `-- name: GetCategories :many
SELECT CategoryID, CategoryName FROM categories
`

func (q *Queries) GetCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.CategoryID, &i.CategoryName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategory = `-- name: GetCategory :one
SELECT CategoryID, CategoryName FROM categories WHERE "CategoryID" = ?
`

func (q *Queries) GetCategory(ctx context.Context, categoryid int64) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategory, categoryid)
	var i Category
	err := row.Scan(&i.CategoryID, &i.CategoryName)
	return i, err
}

const insertCategory = `-- name: InsertCategory :execresult
INSERT INTO categories("CategoryName") VALUES(?)
`

func (q *Queries) InsertCategory(ctx context.Context, categoryname string) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertCategory, categoryname)
}

const updateCategory = `-- name: UpdateCategory :execresult
UPDATE categories SET "CategoryName" = ? WHERE "CategoryID" = ?
`

type UpdateCategoryParams struct {
	CategoryName string
	CategoryID   int64
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateCategory, arg.CategoryName, arg.CategoryID)
}
