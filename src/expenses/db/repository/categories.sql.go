// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: categories.sql

package repository

import (
	"context"
)

const getCategories = `-- name: GetCategories :many
SELECT CategoryID, CategoryName FROM categories
`

func (q *Queries) GetCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.CategoryID, &i.CategoryName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategory = `-- name: GetCategory :one
SELECT CategoryID, CategoryName FROM categories WHERE "CategoryID" = ?
`

func (q *Queries) GetCategory(ctx context.Context, categoryid int64) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategory, categoryid)
	var i Category
	err := row.Scan(&i.CategoryID, &i.CategoryName)
	return i, err
}
