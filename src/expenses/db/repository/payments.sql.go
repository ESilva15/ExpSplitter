// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payments.sql

package repository

import (
	"context"
)

const getPayments = `-- name: GetPayments :many
SELECT 
  payments.ExpPaymID, payments.ExpID, payments.UserID, payments.Payed, users.UserID, users.UserName, users.UserPass
FROM 
  "expensesPayments" as payments
JOIN 
  users as users ON users.UserID = payments.UserID
WHERE "ExpID" = ?
`

type GetPaymentsRow struct {
	ExpensesPayment ExpensesPayment
	User            User
}

func (q *Queries) GetPayments(ctx context.Context, expid int64) ([]GetPaymentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPayments, expid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPaymentsRow
	for rows.Next() {
		var i GetPaymentsRow
		if err := rows.Scan(
			&i.ExpensesPayment.ExpPaymID,
			&i.ExpensesPayment.ExpID,
			&i.ExpensesPayment.UserID,
			&i.ExpensesPayment.Payed,
			&i.User.UserID,
			&i.User.UserName,
			&i.User.UserPass,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
