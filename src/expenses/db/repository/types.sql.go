// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: types.sql

package repository

import (
	"context"
	"database/sql"
)

const deleteType = `-- name: DeleteType :execresult
DELETE FROM "expenseTypes" WHERE "TypeID" = ?
`

func (q *Queries) DeleteType(ctx context.Context, typeid int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteType, typeid)
}

const getType = `-- name: GetType :one
SELECT TypeID, TypeName FROM "expenseTypes" WHERE "TypeID" = ?
`

func (q *Queries) GetType(ctx context.Context, typeid int64) (ExpenseType, error) {
	row := q.db.QueryRowContext(ctx, getType, typeid)
	var i ExpenseType
	err := row.Scan(&i.TypeID, &i.TypeName)
	return i, err
}

const getTypes = `-- name: GetTypes :many
SELECT TypeID, TypeName FROM "expenseTypes"
`

func (q *Queries) GetTypes(ctx context.Context) ([]ExpenseType, error) {
	rows, err := q.db.QueryContext(ctx, getTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExpenseType
	for rows.Next() {
		var i ExpenseType
		if err := rows.Scan(&i.TypeID, &i.TypeName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertType = `-- name: InsertType :execresult
INSERT INTO "expenseTypes"("TypeName") VALUES(?)
`

func (q *Queries) InsertType(ctx context.Context, typename string) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertType, typename)
}

const updateType = `-- name: UpdateType :execresult
UPDATE expenseTypes SET "TypeName" = ? WHERE "TypeID" = ?
`

type UpdateTypeParams struct {
	TypeName string
	TypeID   int64
}

func (q *Queries) UpdateType(ctx context.Context, arg UpdateTypeParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateType, arg.TypeName, arg.TypeID)
}
