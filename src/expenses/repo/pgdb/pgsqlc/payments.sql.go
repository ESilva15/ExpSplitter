// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: payments.sql

package pgsqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const deletePayment = `-- name: DeletePayment :execresult
DELETE FROM "expensesPayments" WHERE "ExpPaymID" = $1
`

func (q *Queries) DeletePayment(ctx context.Context, exppaymid int32) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, deletePayment, exppaymid)
}

const getExpensePaymentByUser = `-- name: GetExpensePaymentByUser :one
SELECT
  payments."ExpPaymID", payments."ExpID", payments."UserID", payments."Payed", users."UserID", users."UserName", users."UserPass"
FROM
  "expensesPayments" as payments
JOIN
  users as users ON users."UserID" = payments."UserID"
WHERE
  "ExpID" = $1 AND users."UserID" = $2
`

type GetExpensePaymentByUserParams struct {
	ExpID  int32
	UserID int32
}

type GetExpensePaymentByUserRow struct {
	ExpensesPayment ExpensesPayment
	User            User
}

func (q *Queries) GetExpensePaymentByUser(ctx context.Context, arg GetExpensePaymentByUserParams) (GetExpensePaymentByUserRow, error) {
	row := q.db.QueryRow(ctx, getExpensePaymentByUser, arg.ExpID, arg.UserID)
	var i GetExpensePaymentByUserRow
	err := row.Scan(
		&i.ExpensesPayment.ExpPaymID,
		&i.ExpensesPayment.ExpID,
		&i.ExpensesPayment.UserID,
		&i.ExpensesPayment.Payed,
		&i.User.UserID,
		&i.User.UserName,
		&i.User.UserPass,
	)
	return i, err
}

const getPayments = `-- name: GetPayments :many
SELECT 
  payments."ExpPaymID", payments."ExpID", payments."UserID", payments."Payed", users."UserID", users."UserName", users."UserPass"
FROM 
  "expensesPayments" as payments
JOIN 
  users as users ON users."UserID" = payments."UserID"
WHERE "ExpID" = $1
`

type GetPaymentsRow struct {
	ExpensesPayment ExpensesPayment
	User            User
}

func (q *Queries) GetPayments(ctx context.Context, expid int32) ([]GetPaymentsRow, error) {
	rows, err := q.db.Query(ctx, getPayments, expid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPaymentsRow
	for rows.Next() {
		var i GetPaymentsRow
		if err := rows.Scan(
			&i.ExpensesPayment.ExpPaymID,
			&i.ExpensesPayment.ExpID,
			&i.ExpensesPayment.UserID,
			&i.ExpensesPayment.Payed,
			&i.User.UserID,
			&i.User.UserName,
			&i.User.UserPass,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertPayment = `-- name: InsertPayment :execresult
INSERT INTO "expensesPayments"(
  "ExpID", "UserID", "Payed"
)
VALUES($1, $2, $3)
`

type InsertPaymentParams struct {
	ExpID  int32
	UserID int32
	Payed  pgtype.Numeric
}

func (q *Queries) InsertPayment(ctx context.Context, arg InsertPaymentParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, insertPayment, arg.ExpID, arg.UserID, arg.Payed)
}

const updatePayment = `-- name: UpdatePayment :execresult
UPDATE "expensesPayments"
SET "UserID" = $1, "Payed" = $2
WHERE "ExpPaymID" = $3
`

type UpdatePaymentParams struct {
	UserID    int32
	Payed     pgtype.Numeric
	ExpPaymID int32
}

func (q *Queries) UpdatePayment(ctx context.Context, arg UpdatePaymentParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updatePayment, arg.UserID, arg.Payed, arg.ExpPaymID)
}
