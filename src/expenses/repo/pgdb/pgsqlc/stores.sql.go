// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: stores.sql

package pgsqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
)

const deleteStore = `-- name: DeleteStore :execresult
DELETE FROM stores WHERE "StoreID" = $1
`

func (q *Queries) DeleteStore(ctx context.Context, storeid int32) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, deleteStore, storeid)
}

const getStore = `-- name: GetStore :one
SELECT "StoreID", "StoreName" FROM stores WHERE "StoreID" = $1
`

func (q *Queries) GetStore(ctx context.Context, storeid int32) (Store, error) {
	row := q.db.QueryRow(ctx, getStore, storeid)
	var i Store
	err := row.Scan(&i.StoreID, &i.StoreName)
	return i, err
}

const getStores = `-- name: GetStores :many
SELECT "StoreID", "StoreName" FROM stores
`

func (q *Queries) GetStores(ctx context.Context) ([]Store, error) {
	rows, err := q.db.Query(ctx, getStores)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Store
	for rows.Next() {
		var i Store
		if err := rows.Scan(&i.StoreID, &i.StoreName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertStore = `-- name: InsertStore :execresult
INSERT INTO stores("StoreName") VALUES($1)
`

func (q *Queries) InsertStore(ctx context.Context, storename string) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, insertStore, storename)
}

const updateStore = `-- name: UpdateStore :execresult
UPDATE stores SET "StoreName" = $1 WHERE "StoreID" = $2
`

type UpdateStoreParams struct {
	StoreName string
	StoreID   int32
}

func (q *Queries) UpdateStore(ctx context.Context, arg UpdateStoreParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updateStore, arg.StoreName, arg.StoreID)
}
